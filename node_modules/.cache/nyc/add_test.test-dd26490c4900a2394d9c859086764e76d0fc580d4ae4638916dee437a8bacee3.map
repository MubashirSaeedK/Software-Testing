{"version":3,"sources":["add_test.test.js"],"names":["chai","require","add","expect","describe","it","to","equal","NaN","be","undefined","Infinity","Array"],"mappings":"AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,MAAMD,QAAS,eAAT,CAAV;AACA,MAAME,SAASH,KAAKG,MAApB;;AAGAC,SAAS,cAAT,EAAyB,MAAM;;AAE3BC,OAAG,wDAAH,EAA6D,MAAK;AAC9DF,eAAOD,IAAI,CAAJ,EAAM,CAAN,CAAP,EAAiBI,EAAjB,CAAoBC,KAApB,CAA0B,EAA1B;AACH,KAFD;;AAIAF,OAAG,sDAAH,EAA2D,MAAK;AAC5DF,eAAOD,IAAI,GAAJ,EAAQ,GAAR,CAAP,EAAqBI,EAArB,CAAwBC,KAAxB,CAA8B,GAA9B;AACH,KAFD;;AAIAF,OAAG,8DAAH,EAAmE,MAAK;AACpEF,eAAOD,IAAI,CAAJ,EAAM,GAAN,CAAP,EAAmBI,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACH,KAFD;;AAIAF,OAAG,8DAAH,EAAmE,MAAK;AACpEF,eAAOD,IAAI,GAAJ,EAAQ,CAAR,CAAP,EAAmBI,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACH,KAFD;;AAIAF,OAAG,gFAAH,EAAqF,MAAK;AACtFF,eAAOD,IAAI,CAAJ,EAAM,CAAC,CAAP,CAAP,EAAkBI,EAAlB,CAAqBC,KAArB,CAA2B,CAA3B;AACH,KAFD;;AAIAF,OAAG,kFAAH,EAAuF,MAAK;AACxFF,eAAOD,IAAI,CAAC,CAAL,EAAO,CAAC,CAAR,CAAP,EAAmBI,EAAnB,CAAsBC,KAAtB,CAA4B,CAAC,CAA7B;AACH,KAFD;;AAIAF,OAAG,uEAAH,EAA4E,MAAK;AAC7EF,eAAOD,IAAI,CAAJ,EAAM,CAAC,GAAP,CAAP,EAAoBI,EAApB,CAAuBC,KAAvB,CAA6B,GAA7B;AACH,KAFD;;AAIAF,OAAG,8EAAH,EAAmF,MAAK;AACpFF,eAAOD,IAAI,CAAC,GAAL,EAAS,CAAC,GAAV,CAAP,EAAuBI,EAAvB,CAA0BC,KAA1B,CAAgC,CAAC,IAAjC;AACH,KAFD;;AAIAF,OAAG,+CAAH,EAAoD,MAAK;AACrDF,eAAOD,IAAI,CAAJ,EAAMM,GAAN,CAAP,EAAmBF,EAAnB,CAAsBG,EAAtB,CAAyBD,GAAzB;AACH,KAFD;;AAIAH,OAAG,yDAAH,EAA8D,MAAK;AAC/DF,eAAOD,IAAI,CAAJ,EAAMQ,SAAN,CAAP,EAAyBJ,EAAzB,CAA4BC,KAA5B,CAAkC,CAAlC;AACH,KAFD;;AAIAF,OAAG,yDAAH,EAA8D,MAAK;AAC/DF,eAAOD,IAAIS,QAAJ,EAAa,CAAb,CAAP,EAAwBL,EAAxB,CAA2BC,KAA3B,CAAiCI,QAAjC;AACH,KAFD;;AAIAN,OAAG,oDAAH,EAAyD,MAAK;AAC1DF,eAAOD,IAAI,IAAJ,EAAS,CAAT,CAAP,EAAoBI,EAApB,CAAuBC,KAAvB,CAA6B,CAA7B;AACH,KAFD;;AAIAF,OAAG,8DAAH,EAAmE,MAAK;AACpEF,eAAOD,IAAIS,QAAJ,EAAa,CAACA,QAAd,CAAP,EAAgCL,EAAhC,CAAmCG,EAAnC,CAAsCD,GAAtC;AACH,KAFD;;AAIAH,OAAG,iDAAH,EAAsD,MAAK;AACvDF,eAAOD,IAAIQ,SAAJ,EAAeF,GAAf,CAAP,EAA4BF,EAA5B,CAA+BG,EAA/B,CAAkCD,GAAlC;AACH,KAFD;;AAIAH,OAAG,6CAAH,EAAkD,MAAK;AACnDF,eAAOD,IAAI,IAAIU,KAAJ,EAAJ,EAAgBJ,GAAhB,CAAP,EAA6BF,EAA7B,CAAgCG,EAAhC,CAAmCD,GAAnC;AACH,KAFD;AAKH,CA/DD","file":"add_test.test.js","sourceRoot":"C:/Users/mubas/Desktop/Software_Web_and_Cloud/Software testing/Software-Testing/test","sourcesContent":["var chai = require(\"chai\")\r\nvar add = require (\"../src/add.js\")\r\nconst expect = chai.expect\r\n\r\n\r\ndescribe(\"add.js Tests\", () => {\r\n\r\n    it(\"should return the correct sum when adding two integers\", () =>{\r\n        expect(add(5,5)).to.equal(10)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding two floats\", () =>{\r\n        expect(add(3.2,4.1)).to.equal(7.3)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding integer with float\", () =>{\r\n        expect(add(5,4.2)).to.equal(9.2)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding float with integer\", () =>{\r\n        expect(add(3.2,4)).to.equal(7.2)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding posive integer with negative integer\", () =>{\r\n        expect(add(3,-2)).to.equal(1)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding negative integer with negative integer\", () =>{\r\n        expect(add(-5,-3)).to.equal(-8)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding integer with negative float\", () =>{\r\n        expect(add(6,-2.2)).to.equal(3.8)\r\n    });\r\n\r\n    it(\"should return the correct sum when adding negative float with negative float\", () =>{\r\n        expect(add(-5.5,-5.6)).to.equal(-11.1)\r\n    });\r\n\r\n    it(\"should return NaN when adding integer and NaN\", () =>{\r\n        expect(add(1,NaN)).to.be.NaN\r\n    });\r\n\r\n    it(\"should return a value when adding integer and undefined\", () =>{\r\n        expect(add(5,undefined)).to.equal(5)\r\n    });\r\n\r\n    it(\"should return infinity when adding infinity and integer\", () =>{\r\n        expect(add(Infinity,5)).to.equal(Infinity)\r\n    });\r\n\r\n    it(\"should return a value when adding null and integer\", () =>{\r\n        expect(add(null,5)).to.equal(5)\r\n    });\r\n\r\n    it(\"should return NaN when adding positive and negative Infinity\", () =>{\r\n        expect(add(Infinity,-Infinity)).to.be.NaN\r\n    });\r\n\r\n    it(\"should return NaN when adding undefined and NaN\", () =>{\r\n        expect(add(undefined, NaN)).to.be.NaN\r\n    });\r\n\r\n    it(\"should return NaN when adding NaN and Array\", () =>{\r\n        expect(add(new Array(),NaN)).to.be.NaN\r\n    });\r\n    \r\n    \r\n})\r\n"]}